#python REFINED.py data/normalized_padel_feats_NCI60_672_small.csv res 1 0 10
from sys import argv
# [name, dataset_path, saving_path, iters_count]

# if len(argv) < 3:
#     print("Not enought args\nPlease input: saving path, count of hill climb iterations")
#     exit()

# path, iters_count = argv[1:]
# iters_count = int(iters_count)
iters_count = 10
path = "res"

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from Toolbox import two_d_eq, Assign_features_to_pixels
from sklearn.manifold import MDS
from sklearn.metrics.pairwise import euclidean_distances
import math
from itertools import product
import paraHill
from Toolbox import REFINED_Im_Gen
from myMDS import myMDS

#(48, 407)

X = np.memmap("memmapped.dat", mode = "r", shape = (48, 407), dtype='float64').T

feature_names_list = ['Ptht 2', 'Ptht 3', 'Ptht 4', 'Ptht 5', 'Hlp 1', 'Hlp 2', 'Hlp 3',
       'Hlp 4', 'Hlp 5', 'Byld 1', 'Byld 2', 'Byld 3', 'Byld 4', 'Byld 5',
       'WpWp 1', 'WpWp 2', 'WpWp 3', 'WpWp 4', 'WpWp 5', 'PPP 1', 'PPP 2',
       'PPP 3', 'PPP 4', 'PPP 5', 'SPP 1', 'SPP 2', 'SPP 3', 'SPP 4', 'SPP 5',
       'SYDS 1', 'SYDS 2', 'SYDS 3', 'SYDS 4', 'SYDS 5', 'PodSH', 'PDL 1',
       'PDL 2', 'PDL 3', 'PDL 4', 'PDL 5', 'PDW 1', 'PDW 2', 'PDW 3', 'PDW 4',
       'PDW 5', 'SSH', 'SCO', 'TSW']

nn = math.ceil(np.sqrt(len(feature_names_list)))      			     # Image dimension
Nn = 48                                                              # Number of features
Euc_Dist = euclidean_distances(X.T) 	       			                 
Euc_Dist = np.maximum(Euc_Dist, Euc_Dist.transpose())  

mds_xy = myMDS(Euc_Dist)

eq_xy = two_d_eq(mds_xy, Nn)                                        # -> [0,1]
Img = Assign_features_to_pixels(eq_xy,nn,verbose=0)					# Img is the none-overlapping coordinates generated by MDS
Dist = pd.DataFrame(data = Euc_Dist, columns = feature_names_list, index = feature_names_list)	# Generating a distance matrix which includes the Euclidean distance between each and every descriptor




# Convert from 'F34' to int 34
init_map = np.char.strip(Img.astype(str),'F').astype(int)
map_in_int = init_map


for iter_num in range(iters_count):
    init_coords = [x for x in product([0,1,2],repeat = 2)]
    for init_coord in init_coords:
        # generate the centroids
        xxx = [init_coord[0]+i*3 for i in range(int(nn/3)+1) if (init_coord[0]+i*3)<nn]
        yyy = [init_coord[1]+i*3 for i in range(int(nn/3)+1) if (init_coord[1]+i*3)<nn]
        centr_list = [x for x in product(xxx,yyy)]
        swap_dict = paraHill.evaluate_centroids_in_list(centr_list,Dist,map_in_int)
        # print(swap_dict)
        map_in_int = paraHill.execute_dict_swap(swap_dict, map_in_int)

        print(">",init_coord,"Corr:",paraHill.universial_corr(Dist,map_in_int))


coords = np.array([[item[0] for item in np.where(map_in_int == ii)] for ii in range(Nn)])

X_REFINED_MDS = REFINED_Im_Gen(X[:,:],nn, map_in_int, feature_names_list, coords)


X_reshaped = X_REFINED_MDS.reshape(X_REFINED_MDS.shape[0], nn, nn)
if not os.path.exists(path):
    os.mkdir(path)
for i in range(X_reshaped.shape[0]):
    plt.imsave(f"""{path}/img{i}.png""", X_reshaped[i])




